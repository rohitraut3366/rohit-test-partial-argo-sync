apiVersion: v1
data:
  admin.enabled: "true"
  application.instanceLabelKey: argocd.argoproj.io/instance
  exec.enabled: "false"
  resource.customizations: |
    apps/Deployment:
      health.lua: |
        hs = {}
        replicas = obj.spec and obj.spec.replicas or 0
        available = obj.status and obj.status.availableReplicas or 0
        updated = obj.status and obj.status.updatedReplicas or 0
        ready = obj.status and obj.status.readyReplicas or 0

        -- Ensure at least 75% of the replicas in the latest replica set are available
        if replicas > 0 and updated >= (0.75 * replicas) and ready >= (0.75 * replicas) then
          hs.status = "Healthy"
          hs.message = "75% or more pods in the latest replica set are available and ready."
        else
          hs.status = "Progressing"
          -- Safely format the message only if replicas > 0
          if replicas > 0 then
            hs.message = string.format(
              "%d/%d pods updated, %d/%d pods ready, %d/%d pods available.",
              updated or 0, replicas, ready or 0, replicas, available or 0, replicas
            )
          else
            hs.message = "No replicas specified or resource is not initialized yet."
          end
        end
        return hs
  server.rbac.log.enforce.enable: "false"
  statusbadge.enabled: "false"
  timeout.hard.reconciliation: 0s
  timeout.reconciliation: 180s
  url: https://argocd.example.com
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: argocd
    meta.helm.sh/release-namespace: argocd
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/version: v2.13.1
    helm.sh/chart: argo-cd-7.7.7
  name: argocd-cm
  namespace: argocd
